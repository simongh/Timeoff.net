// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Timeoff;

#nullable disable

namespace Timeoff.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.Property<int>("ApproversUserId")
                        .HasColumnType("int");

                    b.Property<int>("TeamApproverTeamId")
                        .HasColumnType("int");

                    b.HasKey("ApproversUserId", "TeamApproverTeamId");

                    b.HasIndex("TeamApproverTeamId");

                    b.ToTable("TeamApprovers", (string)null);
                });

            modelBuilder.Entity("Timeoff.Entities.Calendar", b =>
                {
                    b.Property<int>("CalendarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalendarId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("bit");

                    b.Property<int?>("LeaveId")
                        .HasColumnType("int");

                    b.Property<byte?>("LeavePart")
                        .HasColumnType("tinyint");

                    b.Property<int?>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CalendarId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LeaveId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("calendar", (string)null);
                });

            modelBuilder.Entity("Timeoff.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<int>("CarryOver")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IntegrationApiEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("IntegrationApiToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsTeamViewHidden")
                        .HasColumnType("bit");

                    b.Property<string>("LdapAuthConfig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LdapAuthEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("ShareAllAbsences")
                        .HasColumnType("bit");

                    b.Property<byte>("StartOfNewYear")
                        .HasColumnType("tinyint");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("Timeoff.Entities.EmailAudit", b =>
                {
                    b.Property<int>("EmailAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailAuditId"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmailAuditId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailAudits", (string)null);
                });

            modelBuilder.Entity("Timeoff.Entities.Leave", b =>
                {
                    b.Property<int>("LeaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaveId"));

                    b.Property<string>("ApproverComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApproverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<byte>("DayPartEnd")
                        .HasColumnType("tinyint");

                    b.Property<byte>("DayPartStart")
                        .HasColumnType("tinyint");

                    b.Property<double>("Days")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DecidedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LeaveId");

                    b.HasIndex("ApproverId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Leaves", (string)null);
                });

            modelBuilder.Entity("Timeoff.Entities.LeaveType", b =>
                {
                    b.Property<int>("LeaveTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaveTypeId"));

                    b.Property<bool>("AutoApprove")
                        .HasColumnType("bit");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<bool>("UseAllowance")
                        .HasColumnType("bit");

                    b.HasKey("LeaveTypeId");

                    b.HasIndex("CompanyId");

                    b.ToTable("LeaveTypes", (string)null);
                });

            modelBuilder.Entity("Timeoff.Entities.PublicHoliday", b =>
                {
                    b.Property<int>("PublicHolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicHolidayId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PublicHolidayId");

                    b.HasIndex("CompanyId");

                    b.ToTable("PublicHolidays", (string)null);
                });

            modelBuilder.Entity("Timeoff.Entities.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<byte>("Friday")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Monday")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Saturday")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Sunday")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Thursday")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Tuesday")
                        .HasColumnType("tinyint");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<byte>("Wednesday")
                        .HasColumnType("tinyint");

                    b.HasKey("ScheduleId");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Schedules", (string)null);
                });

            modelBuilder.Entity("Timeoff.Entities.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<double>("Allowance")
                        .HasColumnType("float");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IncludePublicHolidays")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAccrued")
                        .HasColumnType("bit");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("TeamId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Teams", (string)null);
                });

            modelBuilder.Entity("Timeoff.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<bool>("AutoApprove")
                        .HasColumnType("bit");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TeamId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Timeoff.Entities.UserAllowanceAdjustment", b =>
                {
                    b.Property<int>("UserAllowanceAdjustmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAllowanceAdjustmentId"));

                    b.Property<double>("Adjustment")
                        .HasColumnType("float");

                    b.Property<double>("CarriedOverAllowance")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("UserAllowanceAdjustmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAllowanceAdjustments", (string)null);
                });

            modelBuilder.Entity("Timeoff.Entities.UserFeed", b =>
                {
                    b.Property<int>("UserFeedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserFeedId"));

                    b.Property<string>("FeedToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserFeedId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFeeds", (string)null);
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.HasOne("Timeoff.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ApproversUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Timeoff.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamApproverTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Timeoff.Entities.Calendar", b =>
                {
                    b.HasOne("Timeoff.Entities.Company", "Company")
                        .WithMany("Calendar")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Timeoff.Entities.Leave", "Leave")
                        .WithMany("Calendar")
                        .HasForeignKey("LeaveId");

                    b.HasOne("Timeoff.Entities.LeaveType", "LeaveType")
                        .WithMany("Calendar")
                        .HasForeignKey("LeaveTypeId");

                    b.HasOne("Timeoff.Entities.User", "User")
                        .WithMany("Calendar")
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("Leave");

                    b.Navigation("LeaveType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Timeoff.Entities.EmailAudit", b =>
                {
                    b.HasOne("Timeoff.Entities.Company", "Company")
                        .WithMany("EmailAudits")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Timeoff.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Timeoff.Entities.Leave", b =>
                {
                    b.HasOne("Timeoff.Entities.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Timeoff.Entities.LeaveType", "LeaveType")
                        .WithMany("Leaves")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Timeoff.Entities.User", "User")
                        .WithMany("Leave")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("LeaveType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Timeoff.Entities.LeaveType", b =>
                {
                    b.HasOne("Timeoff.Entities.Company", "Company")
                        .WithMany("LeaveTypes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Timeoff.Entities.PublicHoliday", b =>
                {
                    b.HasOne("Timeoff.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Timeoff.Entities.Schedule", b =>
                {
                    b.HasOne("Timeoff.Entities.Company", "Company")
                        .WithOne("Schedule")
                        .HasForeignKey("Timeoff.Entities.Schedule", "CompanyId");

                    b.HasOne("Timeoff.Entities.User", "User")
                        .WithOne("Schedule")
                        .HasForeignKey("Timeoff.Entities.Schedule", "UserId");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Timeoff.Entities.Team", b =>
                {
                    b.HasOne("Timeoff.Entities.Company", "Company")
                        .WithMany("Teams")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Timeoff.Entities.User", "Manager")
                        .WithMany("ManagedTeams")
                        .HasForeignKey("ManagerId");

                    b.Navigation("Company");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Timeoff.Entities.User", b =>
                {
                    b.HasOne("Timeoff.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Timeoff.Entities.Team", "Team")
                        .WithMany("Users")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Timeoff.Entities.UserAllowanceAdjustment", b =>
                {
                    b.HasOne("Timeoff.Entities.User", "User")
                        .WithMany("Adjustments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Timeoff.Entities.UserFeed", b =>
                {
                    b.HasOne("Timeoff.Entities.User", "User")
                        .WithMany("Feeds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Timeoff.Entities.Company", b =>
                {
                    b.Navigation("Calendar");

                    b.Navigation("EmailAudits");

                    b.Navigation("LeaveTypes");

                    b.Navigation("Schedule")
                        .IsRequired();

                    b.Navigation("Teams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Timeoff.Entities.Leave", b =>
                {
                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("Timeoff.Entities.LeaveType", b =>
                {
                    b.Navigation("Calendar");

                    b.Navigation("Leaves");
                });

            modelBuilder.Entity("Timeoff.Entities.Team", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Timeoff.Entities.User", b =>
                {
                    b.Navigation("Adjustments");

                    b.Navigation("Calendar");

                    b.Navigation("Feeds");

                    b.Navigation("Leave");

                    b.Navigation("ManagedTeams");

                    b.Navigation("Schedule");
                });
#pragma warning restore 612, 618
        }
    }
}
